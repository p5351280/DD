$date
	Sun Apr  9 22:39:26 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fulladder_test $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$scope module DUT $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 % cin $end
$var wire 4 ( sum [3:0] $end
$var wire 1 " cout $end
$var wire 1 ) c2 $end
$var wire 1 * c1 $end
$var wire 1 + c0 $end
$scope module fa0 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 % cin $end
$var wire 1 + cout $end
$var wire 1 . sum $end
$var wire 1 / x $end
$var wire 1 0 y $end
$var wire 1 1 z $end
$upscope $end
$scope module fa1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 + cin $end
$var wire 1 * cout $end
$var wire 1 4 sum $end
$var wire 1 5 x $end
$var wire 1 6 y $end
$var wire 1 7 z $end
$upscope $end
$scope module fa2 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 * cin $end
$var wire 1 ) cout $end
$var wire 1 : sum $end
$var wire 1 ; x $end
$var wire 1 < y $end
$var wire 1 = z $end
$upscope $end
$scope module fa3 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 ) cin $end
$var wire 1 " cout $end
$var wire 1 @ sum $end
$var wire 1 A x $end
$var wire 1 B y $end
$var wire 1 C z $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1C
0B
0A
1@
1?
1>
1=
0<
0;
1:
19
18
17
06
05
14
13
12
11
00
0/
1.
1-
1,
1+
1*
1)
b1111 (
b1111 '
b1111 &
1%
b1111 $
b1111 #
1"
b1111 !
$end
#1000
14
b1110 !
b1110 (
0.
10
1+
1/
01
0,
b1110 #
b1110 &
#2000
0:
0*
15
07
0+
0/
02
b1010 !
b1010 (
0.
00
0-
b1100 #
b1100 &
0%
b1110 $
b1110 '
#3000
0@
b110 !
b110 (
1:
0)
1;
0=
08
b1000 #
b1000 &
#4000
1@
0"
04
1A
0C
05
0>
b1101 !
b1101 (
1.
03
b0 #
b0 &
1%
b1100 $
b1100 '
